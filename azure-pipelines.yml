trigger: none

pool: Default

variables:
  terraformWorkingDirectory: $(System.DefaultWorkingDirectory)/Terraform/Landing_Zone_Monolithic_Services_Infra/Env/Prod'

# Stage 1: Terraform Init
stages:
- stage: init
  displayName: Terraform Init
  jobs:
  - job: Terraform_Init
    displayName: Init Terraform
    steps:
    - checkout: self
    # - task: TerraformInstaller@0
    #   displayName: 'Install Terraform'
    #   inputs:
    #     terraformVersion: '1.6.6'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '$(System.DefaultWorkingDirectory)'
        backendServiceArm: 'studentAccount'
        backendAzureRmResourceGroupName: 'NetworkWatcherRG'
        backendAzureRmStorageAccountName: 'pipelinestoragerg'
        backendAzureRmContainerName: 'blobcontainer'
        backendAzureRmKey: 'prod.tfstate'


# Stage 2: Terraform Validate
- stage: validate
  displayName: Terraform Validate
  jobs:
  - job: ValidateJob
    displayName: Validate Terraform
    steps:
    - checkout: self
    # - task: TerraformInstaller@0
    #   displayName: 'Install Terraform'
    #   inputs:
    #     terraformVersion: '1.6.6'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Format (FMT)'
      inputs:
        provider: 'azurerm'
        command: 'custom'
        outputTo: 'console'
        customCommand: 'fmt'
        environmentServiceNameAzureRM: 'studentAccount'
    - task: TerraformTask@5
      displayName: Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(terraformWorkingDirectory)'
        environmentServiceNameAzureRM: 'studentAccount'

# # Stage 3: Plan (Apply is optional and commented out)
# - stage: plan
#   displayName: Terraform Plan
#   jobs:
#   - job: PlanJob
#     displayName: Terraform Plan and Optional Apply
#     steps:
#     - checkout: self

#     - task: TerraformInstaller@0
#       displayName: 'Install Terraform'
#       inputs:
#         terraformVersion: '1.6.6'

#     - task: TerraformTaskV4@4
#       displayName: 'Terraform Init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(terraformWorkingDirectory)'
#         backendServiceArm: 'studentAccount'
#         backendAzureRmResourceGroupName: 'NetworkWatcherRG'
#         backendAzureRmStorageAccountName: 'pipelinestoragerg'
#         backendAzureRmContainerName: 'pipelinestoragerg'
#         backendAzureRmKey: 'prod.tfstate'

#     - task: TerraformTaskV4@4
#       displayName: 'Terraform Plan'
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         workingDirectory: '$(terraformWorkingDirectory)'
#         environmentServiceNameAzureRM: 'studentAccount'

    # Uncomment below to enable Terraform Apply
    # - task: TerraformTaskV4@4
    #   displayName: 'Terraform Apply'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(terraformWorkingDirectory)'
    #     environmentServiceNameAzureRM: 'studentAccount'
    #     args: '-auto-approve'
