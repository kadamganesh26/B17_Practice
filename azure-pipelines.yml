trigger:
- main

pool: 
  name: Default

variables:
  terraformWorkingDirectory: 'Terraform/Landing_Zone_Monolithic_Services_Infra/Env/Prod' #My code location on the github

#Stage1 Terraform Init 
stages:  
- stage : init 
  displayName: Terraform Init
  jobs:  
  - job: Terraform_Init 
    steps:
    - checkout: self 
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.11.3'
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        backendServiceArm: 'studentAccount'
        backendAzureRmResourceGroupName: 'NetworkWatcherRG'
        backendAzureRmStorageAccountName: 'pipelinestoragerg'
        backendAzureRmContainerName: 'pipelinestoragerg'
        backendAzureRmKey: 'prod.tfstate'

#Stage2 Terraform Validate
- stage: validate
  displayName: Terraform Validate
  jobs:
  - job: ValidateJob
    steps:
    - checkout: self
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)' #My code location on the github
    - task: TerraformTask@5
      displayName: Terraform Format (FMT)
      inputs:
        provider: 'azurerm'
        command: 'custom'
        commandOptions: 'fmt'
        outputTo: 'console'
        environmentServiceNameAzureRM: 'studentAccount'

#Stage3 init,Plan and Apply
- stage: init_in_3rd_Stage
  displayName: Terrform Plan
  jobs:
    - job: Init_plan_apply
      steps:
        - task: TerraformTask@5
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/Terrform/Landing_Zone_Monolithic_Services_Infra/Env/Prod'
            backendServiceArm: 'studentAccount'
            backendAzureRmResourceGroupName: 'NetworkWatcherRG'
            backendAzureRmStorageAccountName: 'pipelinestoragerg'
            backendAzureRmContainerName: 'pipelinestoragerg'
            backendAzureRmKey: 'prod.tfstate'
        
        - task: TerraformTask@5
          displayName: plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/Terrform/Landing_Zone_Monolithic_Services_Infra/Env/Prod'
            environmentServiceNameAzureRM: 'studentAccount'

        # - task: TerraformTask@5
        #   displayName: Apply
        #   inputs:
        #     provider: 'azurerm'
        #     command: 'custom'
        #     outputTo: 'console'
        #     customCommand: 'apply -auto-approve'
        #     environmentServiceNameAzureRM: 'studentAccount'
    